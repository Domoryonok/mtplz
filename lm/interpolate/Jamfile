fakelib interp : ../common//common [ glob *.cc : *_main.cc *_test.cc tune_*.cc ] : <cxxflags>-fopenmp ;

import testing ;

local with-eigen = [ option.get "with-eigen" : "/usr/include/eigen3" : "/usr/include/eigen3" ] ;

obj tune_have_eigen.o : tune_have_eigen.cc : <include>$(with-eigen) ;
explicit tune_have_eigen.o ;

obj tune_instance.o : tune_instance.cc interp ..//kenlm : <include>$(with-eigen) ;
obj tune_instance_test.o : tune_instance_test.cc ..//kenlm /top//boost_unit_test_framework : <include>$(with-eigen) ;
run tune_instance_test.o tune_instance.o interp ..//kenlm ../common//common ../../util/stream//stream /top//boost_unit_test_framework : : tune_instance_data/toy0.1 ;
fakelib tuning : tune_instance.o tune_derivatives.cc interp ..//kenlm : <include>$(with-eigen) ;
unit-test tune_derivatives_test : tune_derivatives_test.cc tuning /top//boost_unit_test_framework : <include>$(with-eigen) ;
exe tune : tune_main.cc tuning /top//boost_program_options : <include>$(with-eigen) ;
explicit tune_instance.o tune_instance_test.o tune_instance_test tuning tune_derivatives_test tune ;
alias all_tuning : : [ check-target-builds tune_have_eigen.o "Eigen in $(with-eigen)" : <source>tune_instance_test <source>tune <source>tune_derivatives_test ] ;

exe interpolate : interpolate_main.cc interp /top//boost_program_options ;
exe streaming_example : ../builder//builder interp streaming_example_main.cc /top//boost_program_options ;

unit-test normalize_test : interp normalize_test.cc /top//boost_unit_test_framework ;
unit-test backoff_reunification_test : interp backoff_reunification_test.cc /top//boost_unit_test_framework ;
unit-test bounded_sequence_encoding_test : interp bounded_sequence_encoding_test.cc /top//boost_unit_test_framework ;
run merge_vocab_test.cc interp /top//boost_unit_test_framework : : merge_test/test1 merge_test/test2 merge_test/test3 merge_test/test_bad_order merge_test/test_no_unk ;
